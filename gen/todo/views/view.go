// Code generated by goa v3.12.4, DO NOT EDIT.
//
// todo views
//
// Command:
// $ goa gen github.com/hopeshigh/goa-playground/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Todoresult is the viewed result type that is projected based on a view.
type Todoresult struct {
	// Type to project
	Projected *TodoresultView
	// View to render
	View string
}

// TodoresultCollection is the viewed result type that is projected based on a
// view.
type TodoresultCollection struct {
	// Type to project
	Projected TodoresultCollectionView
	// View to render
	View string
}

// TodoresultView is a type that runs validations on a projected type.
type TodoresultView struct {
	// Unique identifier for the Todo
	ID *int
	// Title of the Todo
	Title *string
	// Description of the Todo
	Description *string
	// Status of the Todo
	Status *string
}

// TodoresultCollectionView is a type that runs validations on a projected type.
type TodoresultCollectionView []*TodoresultView

var (
	// TodoresultMap is a map indexing the attribute names of Todoresult by view
	// name.
	TodoresultMap = map[string][]string{
		"default": {
			"ID",
			"Title",
			"Description",
			"Status",
		},
	}
	// TodoresultCollectionMap is a map indexing the attribute names of
	// TodoresultCollection by view name.
	TodoresultCollectionMap = map[string][]string{
		"default": {
			"ID",
			"Title",
			"Description",
			"Status",
		},
	}
)

// ValidateTodoresult runs the validations defined on the viewed result type
// Todoresult.
func ValidateTodoresult(result *Todoresult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTodoresultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateTodoresultCollection runs the validations defined on the viewed
// result type TodoresultCollection.
func ValidateTodoresultCollection(result TodoresultCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTodoresultCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateTodoresultView runs the validations defined on TodoresultView using
// the "default" view.
func ValidateTodoresultView(result *TodoresultView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ID", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Title", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Description", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Status", "result"))
	}
	return
}

// ValidateTodoresultCollectionView runs the validations defined on
// TodoresultCollectionView using the "default" view.
func ValidateTodoresultCollectionView(result TodoresultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateTodoresultView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
