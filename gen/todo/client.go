// Code generated by goa v3.12.4, DO NOT EDIT.
//
// todo client
//
// Command:
// $ goa gen github.com/hopeshigh/goa-playground/design

package todo

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "todo" service client.
type Client struct {
	CreateEndpoint   goa.Endpoint
	CompleteEndpoint goa.Endpoint
	ViewEndpoint     goa.Endpoint
	ListEndpoint     goa.Endpoint
}

// NewClient initializes a "todo" service client given the endpoints.
func NewClient(create, complete, view, list goa.Endpoint) *Client {
	return &Client{
		CreateEndpoint:   create,
		CompleteEndpoint: complete,
		ViewEndpoint:     view,
		ListEndpoint:     list,
	}
}

// Create calls the "create" endpoint of the "todo" service.
func (c *Client) Create(ctx context.Context, p *CreatePayload) (res string, err error) {
	var ires any
	ires, err = c.CreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Complete calls the "complete" endpoint of the "todo" service.
func (c *Client) Complete(ctx context.Context, p *CompletePayload) (err error) {
	_, err = c.CompleteEndpoint(ctx, p)
	return
}

// View calls the "view" endpoint of the "todo" service.
func (c *Client) View(ctx context.Context, p *ViewPayload) (res *Todoresult, err error) {
	var ires any
	ires, err = c.ViewEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Todoresult), nil
}

// List calls the "list" endpoint of the "todo" service.
func (c *Client) List(ctx context.Context) (res TodoresultCollection, err error) {
	var ires any
	ires, err = c.ListEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(TodoresultCollection), nil
}
