// Code generated by goa v3.12.4, DO NOT EDIT.
//
// todo endpoints
//
// Command:
// $ goa gen github.com/hopeshigh/goa-playground/design

package todo

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "todo" service endpoints.
type Endpoints struct {
	Create   goa.Endpoint
	Complete goa.Endpoint
	View     goa.Endpoint
	List     goa.Endpoint
}

// NewEndpoints wraps the methods of the "todo" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Create:   NewCreateEndpoint(s),
		Complete: NewCompleteEndpoint(s),
		View:     NewViewEndpoint(s),
		List:     NewListEndpoint(s),
	}
}

// Use applies the given middleware to all the "todo" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Create = m(e.Create)
	e.Complete = m(e.Complete)
	e.View = m(e.View)
	e.List = m(e.List)
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "todo".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePayload)
		return s.Create(ctx, p)
	}
}

// NewCompleteEndpoint returns an endpoint function that calls the method
// "complete" of service "todo".
func NewCompleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CompletePayload)
		return nil, s.Complete(ctx, p)
	}
}

// NewViewEndpoint returns an endpoint function that calls the method "view" of
// service "todo".
func NewViewEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ViewPayload)
		res, err := s.View(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTodoresult(res, "default")
		return vres, nil
	}
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "todo".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		res, err := s.List(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTodoresultCollection(res, "default")
		return vres, nil
	}
}
