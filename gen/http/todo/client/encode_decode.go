// Code generated by goa v3.12.4, DO NOT EDIT.
//
// todo HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/hopeshigh/goa-playground/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	todo "github.com/hopeshigh/goa-playground/gen/todo"
	todoviews "github.com/hopeshigh/goa-playground/gen/todo/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "todo" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTodoPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("todo", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the todo create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*todo.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("todo", "create", "*todo.CreatePayload", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("todo", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the todo
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("todo", "create", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("todo", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildCompleteRequest instantiates a HTTP request object with method and path
// set to call the "todo" service "complete" endpoint
func (c *Client) BuildCompleteRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*todo.CompletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("todo", "complete", "*todo.CompletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CompleteTodoPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("todo", "complete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCompleteResponse returns a decoder for responses returned by the todo
// complete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCompleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("todo", "complete", resp.StatusCode, string(body))
		}
	}
}

// BuildViewRequest instantiates a HTTP request object with method and path set
// to call the "todo" service "view" endpoint
func (c *Client) BuildViewRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*todo.ViewPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("todo", "view", "*todo.ViewPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ViewTodoPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("todo", "view", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeViewResponse returns a decoder for responses returned by the todo view
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeViewResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ViewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("todo", "view", err)
			}
			p := NewViewTodoresultOK(&body)
			view := "default"
			vres := &todoviews.Todoresult{Projected: p, View: view}
			if err = todoviews.ValidateTodoresult(vres); err != nil {
				return nil, goahttp.ErrValidationError("todo", "view", err)
			}
			res := todo.NewTodoresult(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("todo", "view", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "todo" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListTodoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("todo", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the todo list
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("todo", "list", err)
			}
			p := NewListTodoresultCollectionOK(body)
			view := "default"
			vres := todoviews.TodoresultCollection{Projected: p, View: view}
			if err = todoviews.ValidateTodoresultCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("todo", "list", err)
			}
			res := todo.NewTodoresultCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("todo", "list", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTodoresultResponseToTodoviewsTodoresultView builds a value of type
// *todoviews.TodoresultView from a value of type *TodoresultResponse.
func unmarshalTodoresultResponseToTodoviewsTodoresultView(v *TodoresultResponse) *todoviews.TodoresultView {
	res := &todoviews.TodoresultView{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Status:      v.Status,
	}

	return res
}
