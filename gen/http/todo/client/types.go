// Code generated by goa v3.12.4, DO NOT EDIT.
//
// todo HTTP client types
//
// Command:
// $ goa gen github.com/hopeshigh/goa-playground/design

package client

import (
	todo "github.com/hopeshigh/goa-playground/gen/todo"
	todoviews "github.com/hopeshigh/goa-playground/gen/todo/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "todo" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Todo title
	Title string `form:"title" json:"title" xml:"title"`
	// Todo description
	Description string `form:"description" json:"description" xml:"description"`
}

// ViewResponseBody is the type of the "todo" service "view" endpoint HTTP
// response body.
type ViewResponseBody struct {
	// Unique identifier for the Todo
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the Todo
	Title *string `form:"Title,omitempty" json:"Title,omitempty" xml:"Title,omitempty"`
	// Description of the Todo
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// Status of the Todo
	Status *string `form:"Status,omitempty" json:"Status,omitempty" xml:"Status,omitempty"`
}

// ListResponseBody is the type of the "todo" service "list" endpoint HTTP
// response body.
type ListResponseBody []*TodoresultResponse

// TodoresultResponse is used to define fields on response body types.
type TodoresultResponse struct {
	// Unique identifier for the Todo
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the Todo
	Title *string `form:"Title,omitempty" json:"Title,omitempty" xml:"Title,omitempty"`
	// Description of the Todo
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// Status of the Todo
	Status *string `form:"Status,omitempty" json:"Status,omitempty" xml:"Status,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "todo" service.
func NewCreateRequestBody(p *todo.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Title:       p.Title,
		Description: p.Description,
	}
	return body
}

// NewViewTodoresultOK builds a "todo" service "view" endpoint result from a
// HTTP "OK" response.
func NewViewTodoresultOK(body *ViewResponseBody) *todoviews.TodoresultView {
	v := &todoviews.TodoresultView{
		ID:          body.ID,
		Title:       body.Title,
		Description: body.Description,
		Status:      body.Status,
	}

	return v
}

// NewListTodoresultCollectionOK builds a "todo" service "list" endpoint result
// from a HTTP "OK" response.
func NewListTodoresultCollectionOK(body ListResponseBody) todoviews.TodoresultCollectionView {
	v := make([]*todoviews.TodoresultView, len(body))
	for i, val := range body {
		v[i] = unmarshalTodoresultResponseToTodoviewsTodoresultView(val)
	}

	return v
}

// ValidateTodoresultResponse runs the validations defined on TodoresultResponse
func ValidateTodoresultResponse(body *TodoresultResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ID", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Description", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Status", "body"))
	}
	return
}
