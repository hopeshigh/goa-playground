// Code generated by goa v3.12.4, DO NOT EDIT.
//
// todo HTTP server types
//
// Command:
// $ goa gen github.com/hopeshigh/goa-playground/design

package server

import (
	todo "github.com/hopeshigh/goa-playground/gen/todo"
	todoviews "github.com/hopeshigh/goa-playground/gen/todo/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "todo" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Todo title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Todo description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// ViewResponseBody is the type of the "todo" service "view" endpoint HTTP
// response body.
type ViewResponseBody struct {
	// Unique identifier for the Todo
	ID int `form:"ID" json:"ID" xml:"ID"`
	// Title of the Todo
	Title string `form:"Title" json:"Title" xml:"Title"`
	// Description of the Todo
	Description string `form:"Description" json:"Description" xml:"Description"`
	// Status of the Todo
	Status string `form:"Status" json:"Status" xml:"Status"`
}

// TodoresultResponseCollection is the type of the "todo" service "list"
// endpoint HTTP response body.
type TodoresultResponseCollection []*TodoresultResponse

// TodoresultResponse is used to define fields on response body types.
type TodoresultResponse struct {
	// Unique identifier for the Todo
	ID int `form:"ID" json:"ID" xml:"ID"`
	// Title of the Todo
	Title string `form:"Title" json:"Title" xml:"Title"`
	// Description of the Todo
	Description string `form:"Description" json:"Description" xml:"Description"`
	// Status of the Todo
	Status string `form:"Status" json:"Status" xml:"Status"`
}

// NewViewResponseBody builds the HTTP response body from the result of the
// "view" endpoint of the "todo" service.
func NewViewResponseBody(res *todoviews.TodoresultView) *ViewResponseBody {
	body := &ViewResponseBody{
		ID:          *res.ID,
		Title:       *res.Title,
		Description: *res.Description,
		Status:      *res.Status,
	}
	return body
}

// NewTodoresultResponseCollection builds the HTTP response body from the
// result of the "list" endpoint of the "todo" service.
func NewTodoresultResponseCollection(res todoviews.TodoresultCollectionView) TodoresultResponseCollection {
	body := make([]*TodoresultResponse, len(res))
	for i, val := range res {
		body[i] = marshalTodoviewsTodoresultViewToTodoresultResponse(val)
	}
	return body
}

// NewCreatePayload builds a todo service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *todo.CreatePayload {
	v := &todo.CreatePayload{
		Title:       *body.Title,
		Description: *body.Description,
	}

	return v
}

// NewCompletePayload builds a todo service complete endpoint payload.
func NewCompletePayload(id string) *todo.CompletePayload {
	v := &todo.CompletePayload{}
	v.ID = id

	return v
}

// NewViewPayload builds a todo service view endpoint payload.
func NewViewPayload(id string) *todo.ViewPayload {
	v := &todo.ViewPayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	return
}
